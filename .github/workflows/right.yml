name: Build OpenWrt Firmware

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      TERM: xterm-256color
      DEBIAN_FRONTEND: noninteractive
    strategy:
      fail-fast: false
      matrix:
        target:
          - { arch: "rockchip/armv8", profile: "lyt_t68m", name: "T68M" }
          - { arch: "rockchip/armv8", profile: "friendlyarm_nanopi-r3s", name: "R3S" }
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-distutils rsync unzip zlib1g-dev file wget python3-pip \
            python3-dev python3-setuptools python3-yaml python3-jsonschema \
            libpython3-dev antlr3 gperf ncurses-term
          sudo pip3 install ply pyelftools
          # Set up environment for non-interactive builds
          export TERM=xterm-256color
          export DEBIAN_FRONTEND=noninteractive
          
      - name: Clone and Prepare Feeds
        run: |
          git clone https://github.com/immortalwrt/immortalwrt.git immortalwrt
          cd immortalwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: Check Prerequisites
        run: |
          cd immortalwrt
          # Install additional required packages
          sudo apt-get install -y ccache ecj fastjar java-propose-classpath \
            libelf-dev libncurses-dev python3-setuptools python3-dev \
            swig time xsltproc
          # Install additional Python modules
          sudo pip3 install pyelftools pycryptodome
          # Run prerequisite check
          make prereq
          
      - name: Add Custom Defaults & Scripts
        run: |
          cd immortalwrt
          mkdir -p files/etc/uci-defaults files/usr/bin
          # Set default LAN IP to 192.168.8.8
          cat > files/etc/uci-defaults/99-init-ip <<'EOF'
          #!/bin/sh
          uci set network.lan.ipaddr='192.168.8.8'
          uci commit network
          exit 0
          EOF
          chmod +x files/etc/uci-defaults/99-init-ip
          # Simplified eMMC install script (mainly for T68M)
          cat > files/usr/bin/emmc-install <<'EOF'
          #!/bin/sh
          echo "[*] Installing to eMMC..."
          dd if=/tmp/firmware.img of=/dev/mmcblk0 bs=4M conv=fsync
          echo "[*] Done! Reboot will load from eMMC."
          EOF
          chmod +x files/usr/bin/emmc-install
          
      - name: Configure Build for ${{ matrix.target.name }}
        run: |
          cd immortalwrt
          rm -f .config
          # Create config file
          cat > .config <<EOF
          CONFIG_TARGET_rockchip=y
          CONFIG_TARGET_rockchip_armv8=y
          CONFIG_TARGET_rockchip_armv8_DEVICE_${{ matrix.target.profile }}=y
          CONFIG_BUILD_NLS=y
          CONFIG_IMAGEOPT=y
          CONFIG_KERNEL_INITRAMFS=y
          CONFIG_TARGET_ROOTFS_TARGZ=y
          CONFIG_TARGET_ROOTFS_SQUASHFS=y
          CONFIG_TARGET_ROOTFS_EXT4FS=y
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-nikki=y
          CONFIG_PACKAGE_openssh-sftp-server=y
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_wget=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_docker=y
          CONFIG_PACKAGE_dockerd=y
          CONFIG_PACKAGE_luci-app-docker=y
          EOF
          # Set terminal type for non-interactive environment
          export TERM=xterm
          # Use defconfig instead of menuconfig for headless builds
          make defconfig V=s
          
      - name: Build Firmware for ${{ matrix.target.name }}
        run: |
          cd immortalwrt
          make -j$(nproc) V=s
          
      - name: Upload Artifacts - TAR.GZ
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.target.name }}-tar-gz
          path: immortalwrt/bin/targets/rockchip/armv8/*.tar.gz
          if-no-files-found: warn
          
      - name: Upload Artifacts - EXT4
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.target.name }}-ext4
          path: immortalwrt/bin/targets/rockchip/armv8/*.ext4.gz
          if-no-files-found: warn
          
      - name: Upload Artifacts - SquashFS
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.target.name }}-squashfs
          path: immortalwrt/bin/targets/rockchip/armv8/*.squashfs
          if-no-files-found: warn
