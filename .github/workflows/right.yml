version: 2.1

parameters:
  target-arch:
    type: string
    default: "rockchip/armv8"
  target-profile:
    type: string
    default: "lyt_t68m"
  target-name:
    type: string
    default: "T68M"

jobs:
  build:
    docker:
      - image: ubuntu:22.04
    resource_class: medium
    parameters:
      target-arch:
        type: string
      target-profile:
        type: string
      target-name:
        type: string
    steps:
      - checkout
      - run:
          name: Setup Build Environment
          command: |
            apt-get update
            apt-get install -y build-essential clang flex bison g++ gawk \
              gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
              python3-distutils rsync unzip zlib1g-dev file wget python3-pip
            pip3 install ply
      - run:
          name: Clone and Prepare Feeds
          command: |
            git clone https://github.com/immortalwrt/immortalwrt.git immortalwrt
            cd immortalwrt
            ./scripts/feeds update -a
            ./scripts/feeds install -a
      - run:
          name: Add Custom Defaults & Scripts
          command: |
            cd immortalwrt
            mkdir -p files/etc/uci-defaults files/usr/bin
            # Set default LAN IP to 192.168.8.8
            cat > files/etc/uci-defaults/99-init-ip <<'EOF'
            #!/bin/sh
            uci set network.lan.ipaddr='192.168.8.8'
            uci commit network
            exit 0
            EOF
            chmod +x files/etc/uci-defaults/99-init-ip
            # Simplified eMMC install script (mainly for T68M)
            cat > files/usr/bin/emmc-install <<'EOF'
            #!/bin/sh
            echo "[*] Installing to eMMC..."
            dd if=/tmp/firmware.img of=/dev/mmcblk0 bs=4M conv=fsync
            echo "[*] Done! Reboot will load from eMMC."
            EOF
            chmod +x files/usr/bin/emmc-install
      - run:
          name: Configure Build for << parameters.target-name >>
          command: |
            cd immortalwrt
            rm -f .config
            cat >> .config <<EOF
            CONFIG_TARGET_rockchip=y
            CONFIG_TARGET_rockchip_armv8=y
            CONFIG_TARGET_rockchip_armv8_DEVICE_<< parameters.target-profile >>=y
            CONFIG_BUILD_NLS=y
            CONFIG_IMAGEOPT=y
            CONFIG_KERNEL_INITRAMFS=y
            CONFIG_TARGET_ROOTFS_TARGZ=y
            CONFIG_TARGET_ROOTFS_SQUASHFS=y
            CONFIG_TARGET_ROOTFS_EXT4FS=y
            CONFIG_PACKAGE_luci-app-openclash=y
            CONFIG_PACKAGE_luci-app-nikki=y
            CONFIG_PACKAGE_openssh-sftp-server=y
            CONFIG_PACKAGE_curl=y
            CONFIG_PACKAGE_wget=y
            CONFIG_PACKAGE_htop=y
            CONFIG_PACKAGE_docker=y
            CONFIG_PACKAGE_dockerd=y
            CONFIG_PACKAGE_luci-app-docker=y
            EOF
            make defconfig
      - run:
          name: Build Firmware for << parameters.target-name >>
          command: |
            cd immortalwrt
            make -j$(nproc) V=s
      - store_artifacts:
          path: immortalwrt/bin/targets/rockchip/armv8/*.tar.gz
          destination: firmware-<< parameters.target-name >>
      - store_artifacts:
          path: immortalwrt/bin/targets/rockchip/armv8/*.ext4.gz
          destination: firmware-<< parameters.target-name >>-ext4
      - store_artifacts:
          path: immortalwrt/bin/targets/rockchip/armv8/*.squashfs
          destination: firmware-<< parameters.target-name >>-squashfs

workflows:
  version: 2
  build-matrix:
    jobs:
      - build:
          name: build-T68M
          target-arch: "rockchip/armv8"
          target-profile: "lyt_t68m"
          target-name: "T68M"
      - build:
          name: build-R3S
          target-arch: "rockchip/armv8"
          target-profile: "friendlyarm_nanopi-r3s"
          target-name: "R3S"
