name: Build ImmortalWrt Multi-Target

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - { arch: "rockchip/armv8", profile: "lyt_t68m", name: "T68M" }
          - { arch: "rockchip/armv8", profile: "friendlyarm_nanopi-r3s", name: "R3S" }

    steps:
      - name: Checkout ImmortalWrt
        uses: actions/checkout@v3

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk \
              gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
              python3-distutils rsync unzip zlib1g-dev file wget

      - name: Clone and Prepare Feeds
        run: |
          git clone https://github.com/immortalwrt/immortalwrt.git immortalwrt
          cd immortalwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Add Custom Defaults & Scripts
        run: |
          cd immortalwrt
          mkdir -p files/etc/uci-defaults files/usr/bin
          # 默认 LAN IP 设为 192.168.8.8
          cat > files/etc/uci-defaults/99-init-ip <<'EOF'
#!/bin/sh
uci set network.lan.ipaddr='192.168.8.8'
uci commit network
exit 0
EOF
          chmod +x files/etc/uci-defaults/99-init-ip

          # 简化的 eMMC 安装脚本（主要用于 T68M）
          cat > files/usr/bin/emmc-install <<'EOF'
#!/bin/sh
echo "[*] Installing to eMMC..."
dd if=/tmp/firmware.img of=/dev/mmcblk0 bs=4M conv=fsync
echo "[*] Done! Reboot will load from eMMC."
EOF
          chmod +x files/usr/bin/emmc-install

      - name: Configure Build for ${{ matrix.target.name }}
        run: |
          cd immortalwrt
          rm -f .config
          cat >> .config <<EOF
CONFIG_TARGET_rockchip=y
CONFIG_TARGET_rockchip_armv8=y
CONFIG_TARGET_rockchip_armv8_DEVICE_${{ matrix.target.profile }}=y
CONFIG_PACKAGE_luci-app-openclash=y
CONFIG_PACKAGE_luci-app-nikki=y
CONFIG_PACKAGE_openssh-sftp-server=y
CONFIG_PACKAGE_curl=y
CONFIG_PACKAGE_wget=y
CONFIG_PACKAGE_htop=y
EOF
          make defconfig

      - name: Build Firmware for ${{ matrix.target.name }}
        run: |
          cd immortalwrt
          make -j$(nproc) V=s

      - name: Upload Firmware Artifact for ${{ matrix.target.name }}
        uses: actions/upload-artifact@v3
        with:
          name: firmware-${{ matrix.target.name }}
          path: immortalwrt/bin/targets/rockchip/armv8/*
